/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/assistant/api/event/v1/allowedValues": {
    get: operations["getAllowedValuesUsingGET"];
  };
  "/assistant/api/event/v1/hello": {
    get: operations["sayHelloUsingGET"];
  };
  "/assistant/api/event/v1/lucky": {
    get: operations["getLuckyEventUsingGET"];
  };
  "/assistant/api/event/v1/search-events": {
    get: operations["searchEventsUsingGET"];
  };
  "/assistant/api/event/v1/testGoogle": {
    get: operations["testGoogleUsingGET"];
  };
  "/assistant/api/place/v1/allowedValues": {
    get: operations["getAllowedValuesUsingGET_1"];
  };
  "/assistant/api/place/v1/search-places": {
    get: operations["searchEventsUsingGET_1"];
  };
  "/assistant/api/stub/v1/pulse/my-calendar": {
    get: operations["getPulseCalendarUsingGET"];
  };
  "/assistant/api/stub/v1/pulse/my-growth": {
    get: operations["getPulseGrowthUsingGET"];
  };
  "/assistant/api/stub/v1/pulse/my-profile": {
    get: operations["getPulseProfileUsingGET"];
  };
  "/assistant/api/stub/v1/pulse/my-tasks": {
    get: operations["getPulseTasksUsingGET"];
  };
  "/assistant/api/stub/v1/random-coffee": {
    get: operations["getRandomCoffeeUsingGET"];
  };
  "/assistant/api/v1/route": {
    get: operations["getRoutesUsingGET"];
    post: operations["createRouteUsingPOST"];
  };
  "/assistant/api/v1/route-event": {
    post: operations["createEventUsingPOST"];
  };
  "/assistant/api/v1/route-event/{eventId}": {
    delete: operations["deleteEventUsingDELETE"];
  };
  "/assistant/api/v1/route/distance": {
    get: operations["getRouteDistancesUsingGET"];
  };
  "/assistant/api/v1/route/{routeId}": {
    get: operations["getRouteByIdUsingGET"];
    delete: operations["deleteRouteUsingDELETE"];
  };
}

export interface definitions {
  CalendarPulse: {
    date?: string;
    meetings?: definitions["MeetingPulse"][];
  };
  Coordinate: {
    lat?: number;
    lon?: number;
  };
  DayOfWeek: {
    working_hours?: definitions["WorkingHour"][];
  };
  Event: {
    ageRestriction?: string;
    dateEnd?: string;
    dateStart?: string;
    description?: string;
    externalId?: number;
    imageUrl?: string;
    name?: string;
    place?: definitions["Place"];
    price?: string;
    rating?: number;
    source?: "doubleGis" | "kudago";
    type?:
    | "CAFE"
    | "CINEMA"
    | "CONCERT"
    | "EDUCATION"
    | "ENTERTAINMENT"
    | "EXHIBITION"
    | "FASHION"
    | "FESTIVAL"
    | "KIDS"
    | "PARTY"
    | "QUEST"
    | "THEATER"
    | "TOUR"
    | "YARMARKI";
  };
  Event0: {
    ageRestriction?: string;
    dateEnd?: string;
    dateStart?: string;
    description?: string;
    externalId?: number;
    imageUrl?: string;
    name?: string;
    place?: definitions["Place"];
    price?: string;
    rating?: number;
    source?: "doubleGis" | "kudago";
    type?:
    | "CAFE"
    | "CINEMA"
    | "CONCERT"
    | "EDUCATION"
    | "ENTERTAINMENT"
    | "EXHIBITION"
    | "FASHION"
    | "FESTIVAL"
    | "KIDS"
    | "PARTY"
    | "QUEST"
    | "THEATER"
    | "TOUR"
    | "YARMARKI";
  };
  EventDate: {
    end?: string;
    endPlain?: string;
    start?: string;
    startPlain?: string;
  };
  EventImage: {
    image?: string;
  };
  GrowthPulse: {
    description?: string;
    duration?: number;
    imageUrl?: string;
    name?: string;
    numOfViews?: number;
    rating?: number;
    tags?: string[];
    type?: string;
  };
  MeetingPulse: {
    description?: string;
    name?: string;
    place?: string;
    time?: string;
  };
  Place: {
    address?: string;
    externalId?: number;
    lat?: number;
    lon?: number;
    source?: "doubleGis" | "kudago";
  };
  Place0: {
    address?: string;
    coords?: definitions["Coordinate"];
    id?: string;
    short_title?: string;
    subway?: string;
    title?: string;
  };
  PlaceImage: {
    main_photo_url?: string;
  };
  PlaceRating: {
    rating?: number;
    recommendation_count?: number;
    review_count?: number;
  };
  Point: {
    lat?: number;
    lon?: number;
    textView?: string;
  };
  ProfilePulse: {
    address?: string;
    dateOfBirth?: string;
    imageUrl?: string;
    interests?: string[];
    name?: string;
    skills?: string[];
    social?: definitions["SocialPulse"][];
  };
  Route: {
    eventList?: definitions["Event"][];
    id?: number;
  };
  RouteCharacteristicResp: {
    cost?: number;
    distance?: string;
    distanceVal?: number;
    duration?: string;
    durationVal?: number;
  };
  Schedule: {
    Fri?: definitions["DayOfWeek"];
    Mon?: definitions["DayOfWeek"];
    Sat?: definitions["DayOfWeek"];
    Sun?: definitions["DayOfWeek"];
    Thu?: definitions["DayOfWeek"];
    Tue?: definitions["DayOfWeek"];
    Wed?: definitions["DayOfWeek"];
  };
  SocialPulse: {
    link?: string;
    name?: string;
  };
  Task: {
    assignee?: string;
    deadline?: string;
    description?: string;
    name?: string;
    tags?: string[];
  };
  WorkingHour: {
    from?: string;
    to?: string;
  };
}

export interface operations {
  getAllowedValuesUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  sayHelloUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getLuckyEventUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions["Event0"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  searchEventsUsingGET: {
    parameters: {
      query: {
        /** categories */
        categories?:
        | "cinema"
        | "concert"
        | "education"
        | "entertainment"
        | "exhibition"
        | "fashion"
        | "festival"
        | "kids"
        | "party"
        | "quest"
        | "theater"
        | "tour"
        | "yarmarki-razvlecheniya-yarmarki";
        /** dateFrom */
        dateFrom?: string;
        /** dateTo */
        dateTo?: string;
        /** isFree */
        isFree?: string;
        /** location */
        location?:
        | "ekb"
        | "kev"
        | "krasnoyarsk"
        | "krd"
        | "kzn"
        | "msk"
        | "nnv"
        | "nsk"
        | "smr"
        | "sochi"
        | "spb"
        | "ufa"
        | "vbg";
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["Event"][];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  testGoogleUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: { [key: string]: definitions["RouteCharacteristicResp"] }[];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getAllowedValuesUsingGET_1: {
    responses: {
      /** OK */
      200: {
        schema: string;
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  searchEventsUsingGET_1: {
    parameters: {
      query: {
        /** lat */
        lat?: number;
        /** lon */
        lon?: number;
        /** place_type */
        place_type: "cafe-restaurant" | "cinema" | "pub" | "theater";
        /** radius */
        radius?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["Place"][];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getPulseCalendarUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions["CalendarPulse"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getPulseGrowthUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions["GrowthPulse"][];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getPulseProfileUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions["ProfilePulse"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getPulseTasksUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions["Task"][];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getRandomCoffeeUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions["ProfilePulse"][];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getRoutesUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions["Route"][];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  createRouteUsingPOST: {
    responses: {
      /** OK */
      200: {
        schema: definitions["Route"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  createEventUsingPOST: {
    parameters: {
      body: {
        /** event */
        event: definitions["Event"];
      };
      query: {
        /** routeId */
        routeId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["Route"];
      };
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteEventUsingDELETE: {
    parameters: {
      path: {
        /** eventId */
        eventId: number;
      };
      query: {
        /** routeId */
        routeId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["Route"];
      };
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  getRouteDistancesUsingGET: {
    parameters: {
      query: {
        /** currentLat */
        currentLat: number;
        /** currentLon */
        currentLon: number;
        /** routeId */
        routeId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: { [key: string]: definitions["RouteCharacteristicResp"] }[];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getRouteByIdUsingGET: {
    parameters: {
      path: {
        /** routeId */
        routeId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["Route"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  deleteRouteUsingDELETE: {
    parameters: {
      path: {
        /** routeId */
        routeId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** No Content */
      204: never;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
}

export interface external { }
